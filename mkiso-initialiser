#!/bin/bash

set -e

usage() {
### Line too long
cat <<EOF
  Usage:
    mkiso-initialiser [-O] [-o <outfile>] [-b] [-p <puppetdir>] [-i <ip>] [-n <netmask>] [-g <gateway>] [-d <dns>] <fqdn>

  Creates <fqdn>.bootstrap.img in the current directory.
  
  Options:
    -O: Overwrite old image if it exists.
    -o: Output filename.
        initialiser-<fqdn>.iso

    -i: Override the IP address (don't look up DNS).
    -n: New server's netmask. Default: 255.255.255.0
    -g: New server's gateway. Default: Server's IP with 4th quadrant changed to 1.
    -d: Space-separated list of DNS servers. Default from /etc/resolv.conf

    -b: Generate a bootstrap (first puppetmaster) autofs image.
    -B: Generate a bootstrap autofs image with its regular manifest.
    -p: Puppet directory for bootstrap image.
EOF
}

unset overwrite bootstrap
unset ip netmask gateway dns
unset puppetdir
unset outfile

while getopts 'Oo:i:n:g:d:bBp:' arg; do
  case $arg in
    O) overwrite=1 ;;
    o) outfile=$OPTARG ;;
    b) bootstrap=1 ;;
    B) bootstrap=full ;;
    i) ip=$OPTARG ;;
    n) netmask=$OPTARG ;;
    g) gateway=$OPTARG ;;
    d) dns=$OPTARG ;;
    p) puppetdir=$OPTARG ;;
    ?)
      usage
      exit 1
      ;;
  esac
done
shift $(expr $OPTIND - 1)

fqdn=$1
hostname=${fqdn%%.*}
domain=${fqdn#*.}
if [ -z "$fqdn" ]; then
  usage
  exit 1
fi

if [ -z "$outfile" ]; then
  outfile="initialiser-$fqdn.iso"
fi

if [ -z "$ip" ]; then
  echo DNS lookup not implemented. >&2
  exit 2
fi

if [ -z "$netmask" ]; then
  netmask=255.255.255.0
fi

if [ -z "$gateway" ]; then
  gateway=${ip%.*}.1
fi

if [ -z "$dns" ]; then
  echo /etc/resolv.conf lookup not implemented. >&2
  exit 2
fi

build=$(mktemp -d)

if [ "$bootstrap" ]; then
  tmppuppet=$(mktemp -d)
  cp -a "$puppetdir" "$tmppuppet"/puppet
  if [ -e "$tmppuppet"/puppet/puppetmaster-bootstrap-enc ]; then
    echo "puppetmaster-bootstrap-enc already exists. Not overwriting." >&2
  else
    # A script which creates a script which creates a file. Ugly.
    cat <<ENCWRAP >"$tmppuppet"/puppet/puppetmaster-bootstrap-enc
#!/bin/sh
set -e
cat <<ENC
ENCWRAP
    if [ "$bootstrap" = "full" ]; then
      PUPPET_ENCDB="$tmppuppet"/puppet/enc.db "$tmppuppet"/puppet/enc $fqdn
    else
      cat <<ENCDB
classes:
  puppet::master:
  openssh::server:
environment: production
ENCDB
    fi >>"$tmppuppet"/puppet/puppetmaster-bootstrap-enc
    echo ENC >> "$tmppuppet"/puppet/puppetmaster-bootstrap-enc
    chmod 755 "$tmppuppet"/puppet/puppetmaster-bootstrap-enc
  fi

  tar czf "$build"/puppet.tgz -C "$tmppuppet" puppet
  rm -fr "$tmppuppet"
  cat <<EOF >"$build"/auto.bootstrap
#!/bin/sh

if [ -e /etc/puppet ]; then
  echo /etc/puppet already exists. >&2
  exit 1
fi

tar xz -C /etc < "\$1"/puppet.tgz
EOF
  chmod 755 "$build"/auto.bootstrap
fi

cat <<EOAUTO >"$build"/auto.network
#!/bin/sh

device_count=\$(ip address ls | grep ^[0-9]+:\\ eth | wc -l)
udev_count=\$(grep ^SUBSYSTEM /etc/udev/rules.d/70-persistent-net.rules | wc -l)
if [ \$device_count != \$udev_count ]; then
  # Just assume eth0 is gone so remove it from rules and rename eth1 to eth0
  mac=\$(ip addr show | awk '/link\/ether/ {print \$2}' | tail -n1)
  sed '1,6p;10p;11s/eth1/eth0/p' -i /etc/udev/rules.d/70-persistent-net.rules
  udevadm control --reload-rules
  udevadm trigger
elif [ \$device_count = 1 ]; then
  mac=\$(ip addr show dev eth0 | awk '/link\/ether/ {print \$2}')
else
  echo Unexpected network configuration! >&2
  exit 1
fi

cat <<EONET >/etc/sysconfig/network
NETWORKING=yes
HOSTNAME=$hostname
EONET
cat <<EOHOSTS >/etc/hosts
127.0.0.1 $fqdn $hostname localhost localhost.localdomain localhost4 localhost4.localdomain4
::1       $fqdn $hostname localhost localhost.localdomain localhost6 localhost6.localdomain6
EOHOSTS
hostname $hostname
pkill mingetty

cat <<EOIF >/etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
ONBOOT=yes
HWADDR=\$mac
TYPE=Ethernet
BOOTPROTO=none
IPADDR=$ip
NETMASK=$netmask
GATEWAY=$gateway
EOIF
ifup eth0

echo search $domain > /etc/resolv.conf
for ns in $dns; do
  echo nameserver \$ns >> /etc/resolv.conf
done

EOAUTO
chmod 755 "$build"/auto.network

wget -O "$build"/puppetlabs.rpm http://yum.puppetlabs.com/el/6/products/x86_64/puppetlabs-release-6-7.noarch.rpm

echo '#!/bin/sh' > "$build"/auto.puppet
echo 'rpm -ivh /mnt/puppetlabs.rpm' >> "$build"/auto.puppet
echo 'yum -y install puppet' >> "$build"/auto.puppet
if [ "$bootstrap" ]; then
  echo 'puppet apply --detailed-exitcodes --verbose --node_terminus=exec --external_nodes=/etc/puppet/puppetmaster-bootstrap-enc /etc/puppet/manifests/site.pp 2>&1'
else
  echo 'puppet agent --detailed-exitcodes --verbose --waitforcert 15 2>&1'
fi >> "$build"/auto.puppet
chmod 755 "$build"/auto.puppet

(
  cat <<HEAD
#!/bin/sh
set -e

if ! [ -e /mnt/autorun ]; then
  echo autorun is not mounted on /mnt? >&2
  exit 1
fi

if [ -e /tmp/autorun.lock ]; then
  echo autorun is locked by /tmp/autorun.lock. >&2
  exit 1
fi
touch /tmp/autorun.lock
trap 'rm -f /tmp/autorun.lock' EXIT

crontab -l | awk '$6 != "/root/bootstrap.cron"' | crontab

HEAD

  if [ "$bootstrap" ]; then
    echo /mnt/auto.bootstrap /mnt
  fi

  echo /mnt/auto.network

  echo /mnt/auto.puppet
) > "$build"/autorun
chmod 755 "$build"/autorun

newfs=$(mktemp)

# Commented out because vmware can only do CDs
#genext2fs -d "$build" -b $((20*1024)) -m0 $newfs # 20MB
genisoimage -r -o $newfs "$build"

if [ -e "$outfile" ]; then
  echo "$outfile is in the way."
  if [ -z "$overwrite" ]; then
    echo "Leaving generated image as $newfs."
    exit 0
  fi

  echo "Deleting it as instructed."
  rm -f "$outfile"
fi

mv "$newfs" "$outfile"

