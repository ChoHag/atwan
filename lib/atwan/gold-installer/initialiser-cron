#!/bin/sh
#
# This script is run every minute on a new server (never during installation)
# to look for, verify and execute an initialisation package.
#
# The functions are included below during the build of the gold image
# installer. Although some functions may ultimately be defined twice, due to
# the load order this in fact means that plugins override core functions as
# expected.
#
# The included functions are obtained by simply collecting the initialiser.in
# files in the core and active plugins.

set -e

# Plugins may override these functions below. Look for BEGIN INCLUDE lines.

# If it's unix and we're root, test ([) and touch (>) will work so all this
# really depends on is the /var/lock directory. Shouldn't need to be overridden
# much.
#
at_lock() {
  if [ -e /var/lock/initialise.lock ]; then
    exit 2
  fi
  echo $$ >/var/lock/initialise.lock
}

at_unlock() { rm -f /var/lock/initialise.lock }

# Create a temporary directory on/in which to mount/extract the initialiser
# package, which will be done by another function (named at_mount_<source>)
# depending on the sources configured in the gold image installer. The mounter
# is also reposonsible for including a corresponding unmounter/deleter.
#
at_mount() {
  export at_top=$(mktemp -d -t)
  unset at_initialiser_source
  for source in $at_initialiser_sources; do # Deliberately unquoted
    fn="at_mount_$source"
    if $fn; then
      at_initialiser_source=$source
      break
    fi
  done
  if [ "$at_initialiser_source" ]; then
    return 0
  else
    return 1
  fi
}

at_umount() {
  if [ "$at_initialiser_source" ]; then
    fn=at_umount_$at_initialiser_source
    $fn
  fi
  if [ -e "$at_top" ]; then
    rmdir "$at_top"
  fi
}

# The initialiser package should contain a file called list, listing all the
# included file. All the files, including this one, should be signed by the GPG
# key who's public counterpart is trusted by the gold image.
#
# There should also be a 'autorun' file which is sourced in the at_autorun
# step.
#
# TODO: Ensure no extra (unsigned) files are present.
#
at_verify() {
  failgpg() {
    echo The signature of "$at_top"/"$1" could not be verified. >&2
    fail=1
  }

  if [ ! -e "$at_top"/list -o ! -e "$at_top"/list.sig ]; then
    exit 0
  fi

  if ! gpg --verify "$at_top"/list.sig; then
    failgpg "$at_top"/list
    exit 1
  fi

  unset fail
  unset got_autorun

  while read file; do
    if [ "${file##*/}" = "autorun" ]; then
      got_autorun=1
    fi
    gpg --verify "$at_top"/"$file".sig || failgpg "$at_top"/"$file"
  done <"$at_top"/list

  if [ "$fail" ]; then
    exit 1
  fi
}

# Load this server's custom variables.
#
at_variables() {
  if [ -e "$at_top"/variables ]; then
    . "$at_top"/variables
  fi
}

# _Source_ (not execute) the autorun script.
#
at_autorun() {
  # This checks not only that it exists, but that it's signed too.
  if [ -z "$got_autorun" ]; then
    echo "$at_top"/autorun not found. >&2
    exit 1
  fi

  . "$at_top"/autorun
}

### INCLUDE

export PATH=/sbin:/bin:/usr/sbin:/usr/bin

# Create a lock file.
at_lock

# Look for and open/mount the initialiser package.
at_mount

# Verify the package's authenticity (GPG scan).
at_verify

# Load this server's variables.
at_variables

# Do the automatic initialisation run.
at_autorun

# Unmount/delete the initialiser package.
at_umount

# Unlock the lock file (if necessary).
at_unlock

echo Atwan initialiser has run through to the end without error.
