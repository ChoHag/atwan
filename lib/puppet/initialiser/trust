#!bash
# sourced within atwan
#
# The puppet plugin's own trust model entails creating a new keypair using the
# puppet master (connected to with ssh if the -A option is given) and including
# the private part in the initialiser package.

if [[ -v at_optarg_b ]]; then
  # There should be an option to install a bootstrap puppet master with a
  # remote CA. For now assume bootstrap == puppetmaster == implicit trust.
  echo \ \ Bootstrap trust is implicit.

else
  if [[ -v at_optarg_A ]]; then
    cmd="ssh $at_optarg_A"
    $cmd puppet cert generate $at_optarg_n
    $cmd cat \"\$\(puppet config print cacert\)\" >"$at_build_dir"/puppet.localcacert
    $cmd cat \"\$\(puppet config print certdir\)\"/$at_optarg_n.pem >"$at_build_dir"/puppet.hostcert
    touch "$at_build_dir"/puppet.hostprivkey
    chmod 600 "$at_build_dir"/puppet.hostprivkey
    $cmd cat \"\$\(puppet config print privatekeydir\)\"/$at_optarg_n.pem >"$at_build_dir"/puppet.hostprivkey
  else
    puppet cert generate $at_optarg_n
    cp "$(puppet config print cacert)" "$at_build_dir"/puppet.localcacert
    cp "$(puppet config print certdir)"/$at_optarg_n.pem "$at_build_dir"/puppet.hostcert
    cp "$(puppet config print privatekeydir)"/$at_optarg_n.pem "$at_build_dir"/puppet.hostprivkey
    chmod 600 "$at_build_dir"/puppet.hostprivkey
  fi
  chmod 644 "$at_build_dir"/puppet.localcacert "$at_build_dir"/puppet.hostcert

  at_puppet_trust=embedded
  push at_variables at_puppet_trust
fi

if [[ ! -v at_optarg_z ]]; then
  unset at_continue
fi
