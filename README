= Automation Thing Without A Name =

Atwan automates the steps of installing an operating system to a server or
virtual machine and setting up configuration management on the new host.

This is an extremely early release. A lot of functionality has not been worked
out and much is likely to change.

Currently Debian 7 (Wheezy) and CentOS 6.4 are supported.

DHCP is not supported because I'm lazy.

The trust model and the cryptography which supports it is very much
work-in-progress. Don't trust it.


== Overview ==

Atwan does not configure nodes on its own. It installs an operating system,
gives a new server its identity (ie. hostname) and sets up the software
necessary to be configured by a trusted 3rd party, eg. a puppet master or chef
server, thus atwan is useless on its own - it requires a collection of puppet
manifests, chef recipes or some other means of auto-configuration. There are
plans which should not be counted on to include a lowest-common-denominator
trust model built around ssh keys.

  # Prepare the installer.
  atwan gold-installer -r debian-7

  # Use the installer to create the gold iamge.
  MB=$((8 * 1024))
  dd if=/dev/zero of=gold.img bs=1048576 seek=$(($MB - 1)) count=1
  kvm -m 2048 -drive if=virtio,file=gold.img -cdrom goldimage-installer-centos-6.4.iso

  # Prepare an ISO (*) signed using GPG which configures the gold image.
  atwan initialiser -r debian-7 -n foo -i 10.0.0.5 -d 8.8.8.8

  # Clone the gold image and initialise it.
  dd if=gold.img of=foo.img bs=$((1048576 * 32))
  kvm -m 2048 -drive if=virtio,file=foo.img -cdrom initialiser--foo.iso
    # Or insert the CD using the qemu console after the VM is started:
  > change ide1-cd0 initialiser--foo.iso

  # Build a puppetmaster with the bootstrap (+) in $HOME/atwan/bootstrap
  at_plugins=puppet atwan initialiser -r debian-7 -n bar -i 10.0.0.6 -d 8.8.8.8 \
    -b -E $HOME/atwan/bootstrap

  # Prepare an ISO which uses puppet.
  #  * Uses ssh to connect to the puppet CA at puppetca.example.com
  #  * The node will talk to the puppet master at puppetmaster.example.com
  at_plugins=puppet atwan initialiser -r debian-7 -n bar -i 10.0.0.7 -d 8.8.8.8 \
    -s puppetmaster.example.com -P puppetca.example.com

[*] Because VMWare.

[+] A tarball (or a directory from which a tarball is created) which is
extracted over /etc on the new server.


== Plugins ==

The script bin/atwan is, slightly by accident, a general tool which reads a
meta file describing a list of steps and the options with which to configure
them, then parses the command-line arguments and runs the defined steps in
sequence. Each step consists of a short section of bash code which is sourced
within the atwan shell environment.

A plugin system is unfortunately used to override the steps as appropriate for
different hardware and operating system platforms and configuration management
systems and it warrants some explanation, although it is the end result of
shaving a mighty yak.

 * The first thing the bin/atwan script does is use the command which has been
   called ($0), or the first argument if that is 'atwan', to determine which
   sequence of steps to run.

 * The steps of a sequence are defined or overridden by a subdirectory inside
   each plugin. Each subdirectory contains a 'meta' file which is sourced by
   bash and must set the at_steps variable (an array).

 * The list of plugins to load is specified by the at_plugins environment
   variable, which is a list of paths separated by a colon (:). Relative paths
   are to the at_lib directory defined at the top of the script, which should
   be changed during installation.

 * The 'atwan' plugin is prepended to the list of plugins to load and defines
   the base set of tasks required to automate whatever process is being
   automated by that sequence of steps.

   To find out what 'atwan foo' does, look at meta in $at_lib/atwan/foo

 * Operating system releases are handled with by a subdirectory of the sequence
   directory if that operating system requires further refinement of any steps
   of a sequence. The release is selected with the -r option, not the
   at_plugins environment variable.

 * The atwan script defines some command-line arguments to look for and the
   meta files define the rest. These are used to parse the command-line
   arguments and display a usage statement if an error occurs doing so.


== Gold Images ==

Atwan creates a gold image which is then cloned for each node. The gold image
includes a trusted gpg public key and looks for a signed package (usually a CD)
which includes a configuration script to run. The gold-installer command
downloads a vendor's installer and modifies it to install the operating system
without user input and including the gpg key and script as stated,

The superuser password, gpg key and installer URL (and OS release as standard)
can all be specified on the command-line.

The gold-installer command requires only that 'an initialiser' be installed on
the gold image. The atwan plugin (ie. the default) has an initialiser script
which consists of shell functions taken from an initialiser.in file in each
plugin's gold-installer directory (and release subdirectory), and then runs
them. One of the first of these sets variables from a file included in the
initialiser package. There is currently no way to include arbitrary code to
execute in the initialiser package, although there was. Oops.


== Initialiser ==

The initialiser command is very closely linked with the gold-installer command.
The script included on the gold image is built according to the plugins which
have been loaded, and so it is unlikely that an initialiser will be created
using a different set of plugins than the gold image for which it is destined.

The initialiser does whatever it needs to so that another device which it
trusts and which trusts it (ie. the puppet master, chef server, etc.) can take
it over. Usually this should just be to bring up the network, install the
appropriate client with its trust credentials (eg. signed keypair) and run it
but some other options can also be set:

  * Authentication
  * Logging
  * Software/packaging
  * Clock
  * Entropy
  * Filesystem


== Bootstrap ==

Clunky.
