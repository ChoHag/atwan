#!/bin/bash
# Change these two lines if atwan gets installed.
at_bin=${at_bin:-$(dirname "$0")}
at_lib=${at_lib:-$at_bin/../lib}

# Abort if any failure is not trapped
set -e

########## Folding, and reading this source code.

# There are folding markers throughout this file so that if it is opened in vim
# you should see around 100 lines of mostly comments. If using the default
# settings, the code within a fold can be seen be navigating to it and typing
# 'zo'. 'zc' will close it again and 'za' toggles between opened and closed.

##########

# Enable debugging if the debug environment variable is set to anything
# other than null or zero.
if [[ -v debug && $debug && $debug != 0 ]]; then
  set -x
else
  unset debug
fi

########## Library of functions.

# I opted to put them here to keep the atwan core self-contained. There are
# folding marks around the functions to make reading this script easier. They
# have mostly superficial functionality, or do just what 
#
# The interesting stuff starts after about 200 lines. If parsing command-line
# arguments is interesting.

  #{{{


  # Display a usage statement including summary and description by combining
  # options from all loaded plugins. Note that anything defined in the release
  # subdirectory cannot affect this statement as the intended release is not
  # known when displaying it.

  usage() {
    unset steps_summary steps_options
    for step in "${at_order[@]}"; do
      step_name=${step%%:*} step_message=${step#*:}
      nl=$'\n'
      if [[ -v ats_${step_name}_summary ]]; then
	# Remove blank lines. Crude but effective.
	eval summary=\${ats_${step_name}_summary//\$nl\$nl/\$nl}
	# Append a new line to the existing summary if it doesn't already have
	# one and append this step's summary snippet to it.
	if [[ $steps_summary =~ $nl$ ]]; then
	  steps_summary="${steps_summary:+$steps_summary}    $summary"
	else
	  steps_summary="${steps_summary:+$steps_summary$nl}    $summary"
	fi
      fi
      # Now to do options exactly what was done to summary
      # Some eval trickery could merge these but with a huge readability cost.
      if [[ -v ats_${step_name}_options ]]; then
	eval options=\${ats_${step_name}_options//\$nl\$nl/\$nl}
	if [[ $steps_options =~ $nl$ ]]; then
	  steps_options="${steps_options:+$steps_options}  ${step_name^} options:$nl$options"
	else
	  steps_options="${steps_options:+$steps_options$nl}  ${step_name^} options:$nl$options"
	fi
      fi
    done

    cat <<EOF
  Usage:
    atwan-$at_exe [-f] [-w <work dir>] [-c <cache file>] [-o <output>]
$steps_summary

  Options:
    -f: Overwrite old image if it exists (force)
    -w: Working directory
	The default is that of mktemp, which is almost certainly /tmp.
	NB. Building a CentOS gold image requires approx. 9GB of working space
    -c: Cache directory
	If set, a location to download files to. If the file already exists,
	it is used instead.
    -o: Output filename.
        Default: ${at_out_file_default_display:-$at_out_file_default}
    -r: OS release

$steps_options
EOF
  }


  # Append everything (else) to the array named in the first argument

  push() {
    name=$1
    shift
    eval $name='("${'"$name"'[@]}" "$@")'
  }


  # Add a string to the string containing the command which is executed as the
  # shell is exiting. Yes, quite. This is brittle. Don't use it.

  atexit() {
    local trapexit
    # Yes sed twice
    trapexit=$(trap -p EXIT           \
	| sed "1{s/^trap -- '//}"     \
	| sed "\${s/' EXIT$//}")
    if [[ ! -v debug ]]; then
      trapexit="$@${trapexit:+; $trapexit}"
    else
      trapexit="echo Skipping ${@//;/\;}${trapexit:+;$trapexit}"
    fi
    trap "$trapexit" EXIT
  }

  if [[ -v debug && $debug -gt 1 ]]; then
    trap "echo at* variables:; set | grep -E ^ats?p?_" EXIT
  fi


  # Pass the URL and optional filename to download into. The default filename
  # is taken by stripping everything from the URL up to the final /.
  #
  # If at_cache_dir is set (the -c option), the file is downloaded into that
  # directory if it is not there already. Otherwise the file is downloaded to the
  # working/temp directory and deleted when atwan is finished.
  #
  # at_cache_file is then set to the filesystem path to which the URL has been
  # downloaded. This variable is only valid until cached_download is called again
  # so save it if you need it.

  cached_download() {
    url=$1
    name=${2:-${url##*/}}

    if [[ -v at_cache_dir ]]; then
      at_cache_file=$at_cache_dir/$name
    else
      file_path=$(mktemp ${at_work_dir:+--tmpdir=$at_work_dir} -d)
      at_cache_file=$file_path/$name
      # Expand here as the file_path variable is neither global nor static
      atexit "chmod +rw -R \"$file_path\"; rm -rf \"$file_path\""
    fi

    if [[ -s "$at_cache_file" ]]; then # Size > 0
      echo $at_cache_file already exists. Not downloading.
    else
      echo Downloading $url to $at_cache_file.
      wget ${debug:+--verbose} -O "$at_cache_file" "$url"
    fi
  }


  # Load the atwan module and any plugins listed in the at_plugins variable, a
  # search path separated by colons (:). Paths which don't begin with / are
  # considered relative to the atwan modules directory (at_lib, set at the top
  # of this script).
  #
  # Each plugin is expected to set the at_steps variable to a list of all of
  # the steps that plugin defines or overrides/augments, and any other
  # variables as appropriate, documented elsewhere.

  load_plugins() {
    subdir=$1
    if [[ $# = 0 ]]; then
      unset at_loaded_plugins
    fi

    # Get bash to do the string->array heavy lifting.
    oIFS=$IFS IFS=:
    # atwan is not really special, it's just first.
    at_plugins_search=(atwan $at_plugins)
    IFS=$oIFS

    for plugin in "${at_plugins_search[@]}"; do
      if [[ ! $plugin =~ ^/ ]]
	then plugin_dir=$at_lib/$plugin
	else plugin_dir=$plugin
      fi

      if [[ ! -d $plugin_dir ]]; then
	echo Plugin not found: "$plugin". >&2
	return 1
      fi

      full_dir=$plugin_dir/$at_exe/$subdir
      if [[ ! -e $full_dir || ! -r $full_dir/meta ]]; then
	echo No metadata for plugin "$plugin${subdir:+::$subdir}": Skipping. >&2
	continue
      fi

      unset at_steps
      source "$full_dir/meta"
      plugin_name=${plugin//[^a-zA-Z]/__}
      if [[ $# = 0 ]]; then
	push at_loaded_plugins "$plugin_name:$full_dir"
	eval at_loaded_plugin_subdirs_$plugin_name=.
      else
	push at_loaded_plugin_subdirs_$plugin_name $subdir
      fi

      for step_full in "${at_steps[@]}"; do
	# Each element of at_steps is broken up as follows:
	#
	# step_full    The string supplied by the meta file.
	# step_token   The (eventually*) augmented name of the step.
	# step_message The message part of step_full.
	# step_name    The name of the step.
	# augment      How the plugin augments an existing step.

	step_token=${step_full%%:*}
	step_message=${step_full#*:}

	# If in a subdir, can only prepend to plugin's runlist (ugly_name)
	# otherwise if plugin is atwan, step is new
	# Otherwise step can new if it's new, or augment otherwise, default to replace.
	if [[ -n $subdir ]]; then
	  if [[ $step_token =~ / ]]; then
	    echo Plugin "$plugin::$subdir" attempted to augment step "${step_token#*/}". >&2
	    return 1
	  fi
	  augment=subdir
	  step_name=$step_token

	else
	  if [[ $plugin == atwan ]]; then
	    # Steps in atwan (TODO: should check idx==0 not plugin==atwan) are
	    # always considered new.
	    augment=${step_token%%/*}
	    if [[ -n $augment && $augment != new && $augment != $step_token ]]; then
	      echo WARNING: Core plugin attempted to augment step ${step_token#*/}. >&2
	    fi
	    augment=new
	    step_name=${step_token#*/}

	  else
	    if [[ $step_token =~ / ]]; then
	      augment=${step_token%%/*}
	      step_name=${step_token#*/}
	    else
	      augment=replace
	      step_name=$step_token
	    fi
	  fi
	fi

	case "$augment" in
	  new) ;;
	  subdir|replace|pre|before|post|after)
	    if [[ ! -v ats_${step_name}_sources ]]; then
	      echo Plugin "$plugin::$subdir" attempted to override non-existent step "$step_token". >&2
	      return 1
	    fi
	    ;;
	  *)
	    echo Invalid augment method: $augment. >&2
	    return 1
	    ;;
	esac

	# Create the run-list for each step as an ordered list of plugins.
	# Plugins which replace a step with their own implementation simply
	# reset the list to consist of itself, pre and post prepend and append
	# the plugin to the list.
	#
	# The subdirectory of each plugin's step implementation to run is
	# maintained elsewhere (in the variable who's name is computed and
	# stored in ugly name) and the plugin is responsible for determining
	# which, if any, other parts of itself are executed.
	case "$augment" in
	  subdir|new|replace)
	    ugly_name=atsp_${step_name}_${plugin_dir//[^a-zA-Z]/__}_subdirs
	    if [[ $augment != subdir ]]; then
	      eval ats_${step_name}_sources=\(\$plugin_dir\)
	      eval $ugly_name=\(.\)
	    else
	      eval $ugly_name=\(\$subdir \${$ugly_name[@]}\)
	    fi
	    if [[ $augment == new ]]; then
	      push at_order "$step_name: $step_message"
	    fi
	    ### TODO: Save each plugin's $step_message if it sets one for display later.
	    ;;

	  pre|before)
	    eval ats_${step_name}_sources=\(\$plugin_dir \"\${ats_${step_name}_sources[@]}\"\)
	    ;;

	  post|after)
	    eval ats_${step_name}_sources=\(\"\${ats_${step_name}_sources[@]}\" \$plugin_dir\)
	    ;;
	esac
      done # for step_full
    done # for plugin
  }


  # Eh what? This is called after the CLI is checked. It can be overriden by
  # the global meta file (and, later, the release meta file) so it has to be
  # defined before that gets parsed.

  further_checks() { return 0; }



  # Move the temporary file given as the argument to $at_out_file, obeying
  # $at_force if $at_out_file exists and being extremely chatty about the whole

  save_out_file() {
    newimg=$1

    if [[ -e "$at_out_file" ]]; then
      echo $at_out_file is in the way. >&2
      if [[ ! -v at_force ]]; then
	echo Leaving generated image as \""$newimg"\".
	return
      fi

      echo Deleting it as instructed. >&2
      rm -f "$at_out_file"
    fi

    echo Moving temporary image to \""$at_out_file"\".
    mv "$newimg" "$at_out_file"
  }

  #}}}

########## Internal initialisation.

# Atwan really just calls a sequence of steps in order as defined in metadata
# elsewhere. I didn't really want to write that but it's what I ended up with.
# The actual sequence is defined by changing the executable name (with or
# without the prefix 'atwan-') or using the executable name 'atwan' in which
# case the first argument is taken as the procedure name and stripped from the
# list. The name, $at_exe, determines where to look for a meta file defining
# the sequence of steps in the at_steps (and at_late_steps) variables.
#
# The procedure name must not begin with a hyphen (-) so that atwan can
# distinguish between the procedure name and command-line arguments, and to
# preserve your and my sanity.

  #{{{


  # Clean slate

  unset at_force at_work_dir at_cache_dir at_out_file at_release at_order
  for letter in {a..z} {A..Z}; do unset at_optarg_$letter; done


  # Determine the procedure name

  at_exe=$(basename "$0")
  if [[ $at_exe != atwan ]]; then
    at_exe=${at_exe#atwan-}
  else
    if [[ $# -eq 0 ]]; then
      echo No atwan procedure was specified and none can be inferred from the executable name. >&2
      echo A list of available commands is in "$at_lib/atwan": >&2
      ls -1 "$at_lib/atwan" >&2
      exit 1
    fi
    if [[ $1 =~ ^- ]]; then
      echo The atwan procedure cannot be inferred from the executable name and the >&2
      echo first argument begins with a hyphen, so it\'s probably an option. >&2
      exit 1
    fi
    at_exe=$1
    shift

    echo Atwan procedure taken from first command line argument: "$at_exe" >&2
  fi


  # Do the needful

  load_plugins

  #}}}

########## Parse command-line arguments (and scan the release metadata)

  #{{{

  # Calculate getopt option string
  at_cli_getopts='fw:c:o:r:'
  for step in "${at_order[@]}"; do
    step_name=${step%%:*} step_message=${step#*:}
    if [[ -v ats_${step_name}_getopts ]]; then
      eval at_cli_getopts=\"\$at_cli_getopts\$ats_${step_name}_getopts\"
    fi
  done

  while getopts "$at_cli_getopts" arg; do
    case $arg in
      f) at_force=1 ;;
      w) at_work_dir=$OPTARG ;;
      c) at_cache_dir=$OPTARG ;;
      o) at_out_file=$OPTARG ;;
      r) at_release=$OPTARG ;;
      ?)
	if [[ $arg != \? ]]; then
	  push at_optarg_$arg "${OPTARG:-1}"
	else
	  usage
	  exit 1
	fi
	;;
    esac
  done
  shift $(expr $OPTIND - 1)

  if [[ $# -ge 1 ]]; then
    echo Error parsing arguments. Remaining arguments: "$@" >&2
    exit 1
  fi

  # Validate options

    #{{{

  # Tot up validation failures so we get all the parsing errors at once and
  # they can all be fixed at once.

  at_getopt_fail=0

  if [[ -v at_work_dir && ! -d "$at_work_dir" ]]; then
    echo Working directory "$at_work_dir" does not exist. >&2
    ((at_getopt_fail+=1))
  fi

  if [[ -v at_cache_dir && ! -d "$at_cache_dir" ]]; then
    echo Cache directory "$at_cache_dir" does not exist. >&2
    ((at_getopt_fail+=1))
  fi

  if [[ ! -v at_release ]]; then
    echo No OS release specified. >&2
    ((at_getopt_fail+=1))
  fi

  # Now that the release is known, its metadata can be included. That it is
  # parsed after the command-line arguments have been processed means that this
  # metadata can't affect them except to set or change defaults.
  #
  # Release metadata cannot affect the usage/help display.

  load_plugins "$at_release"

  # If a plugin defines a command-line option it'll end up in
  # at_optarg_$letter. If defaults are defined, they are set here. The
  # variables are then checked as much as they can be, including whether it
  # is required.


  # nb. Uses at_getopt_fail and at_args_letter
  verify_argument() {
    letter=$1
    index=${2:-0}

    case "${at_args_letter[1]}" in
      number|string)
	if [[ -z ${arg[$index]} && -n ${at_args_letter[2]} ]]; then
	  # Set the default if appropriate
	  eval at_optarg_$letter[$index]=\${at_args_letter[2]}
	fi
	if [[ ${arg[$index]} && ${at_args_letter[1]} == 'number' \
	      && ! ${arg[$index]} =~ ^[0-9]+$ ]]
	then
	  echo "${arg[$index]}" is not a number. >&2
	  ((at_getopt_fail+=1))
	fi
	;;

      gpg:*)
	if [[ -n ${arg[$index]} ]]; then
	  if ! gpg --list-secret-keys "${arg[$index]}" >/dev/null; then
	    if [[ ${at_args_letter[1]%:*} == sec ]]; then
	      echo Cannot find secret key \""${arg[$index]}"\". >&2
	      ((at_getopt_fail+=1))
	    else
	      echo WARNING: Secret key for requested public key \""${arg[$index]}"\" is not available. >&2
	    fi
	  fi

	elif [[ -z ${at_args_letter[2]} ]]; then
	  keys=$(gpg --list-secret-keys --with-colons|awk -F: '$1=="sec"{print$5}')
	  if [[ $(echo "$keys" | wc -l) != 1 ]]; then
	    echo Multiple secret keys available. >&2
	    gpg --list-secret-keys --with-colons \
	      | awk -F: '$1=="sec" {print " * " $5 " " $10}' >&2
	    ((at_getopt_fail+=1))
	  else
	    eval at_optarg_$letter[$index]=\$keys
	  fi
	fi
	;;

    esac
  }

  for letter in {a..z} {A..Z}; do
    if [[ ! -v at_args_$letter ]]; then continue; fi
    eval at_args_letter=\(\"\${at_args_$letter[@]}\"\)

    eval arg=\(\${at_optarg_$letter[@]}\)

    if [[ ${at_args_letter[1]} =~ ^multi-(.*) ]]; then
      at_args_letter[1]=${BASH_REMATCH[1]}
      if [[ ${#arg[@]} -ge 1 ]]; then
	for i in ${!arg[@]}; do
	  verify_argument $letter $i
	done
      else
	verify_argument $letter 0
      fi
    else
      verify_argument $letter 0
    fi


    if [[ ! -v at_optarg_$letter ]]; then
      if [[ ${at_args_letter[0]} != 0 ]]; then
	echo The $letter option is mandatory. >&2
	((at_getopt_fail+=1))
      fi
    fi

  done

  # Perform any checks defined in the meta file. Unfortunately only the last
  # one is parsed because of how bash works, but if there's a need for
  # something more complicated than what this offers there are probably better
  # ways to achieve your goal.

  if ! further_checks; then
    ((at_getopt_fail+=$?))
  fi

  if [[ $at_getopt_fail -gt 0 ]]; then
    echo $at_getopt_fail failure\(s\) encountered parsing command-line options. Aborting. >&2
    exit $at_getopt_fail # Because I can.
  fi

    #}}}
  #}}}

########## Now it finally kicks off

  #{{{

  if [[ ! -v at_out_file ]]; then
    eval at_out_file=$at_out_file_default
  fi

  at_build_dir=$(mktemp ${at_work_dir:+--tmpdir="$at_work_dir"} -d)
  at_meta_dir=$(mktemp ${at_work_dir:+--tmpdir="$at_work_dir"} -d)
  atexit 'chmod +rw -R "$at_build_dir" "$at_meta_dir"; rm -fr "$at_build_dir" "$at_meta_dir"'

  # Loop through all the steps.

  # For each step in at_order there is a list of plugins in ats_${step}_sources
  # For each plugin there is a list of subdirectories in atsp_${step}_${plugindir}_order
  # Each of ats_S_s must be run in turn
  # Only the first of atsp_S_P_o, the list is for bookkeeping.
  # Save it all into some nicely-named variables

  unset result
  count=0
  for step in "${at_order[@]}"; do
    step_name=${step%%:*} step_message=${step#*:}

    echo
    ((count+=1))
    eval echo $count\\\) $step_message ## eval for variable interpolation

    eval ats_this_sources=\(\"\${ats_${step_name}_sources[@]}\"\)
    for plugin_dir in "${ats_this_sources[@]}"; do
      ugly_name=atsp_${step_name}_${plugin_dir//[^a-zA-Z]/__}_subdirs
      eval subdir=\$$ugly_name
      at_step_dir=$plugin_dir/$at_exe/$subdir

      at_continue=1
      source "$at_step_dir/$step_name"
      if [[ ! -v at_continue ]]; then
	break
      fi
    done
  done

  #}}}

echo Finished.

# vim: set ft=sh fdm=marker:
