#!/bin/bash

set -e

if [ ! -e "$(dirname $0)"/atwan.installdirs ]; then
  echo "$(dirname $0)"/atwan.installdirs does not exist. Aborting. >&2
  exit 1
fi
source "$(dirname $0)"/atwan.installdirs
source "$at_lib"/atwan.lib

unset at_force at_work_dir at_cache_dir at_out_file at_release
unset at_search_path at_search_path_prepend at_search_path_replace
unset at_pubkey
export at_secret=secret

usage() {
cat <<EOF
  Usage:
    mkiso-goldimage [-f] [-w <work dir>] [-c <cache file>] [-o <output>]
      -r <release> [(-p|-P) <search path>] [-s <root password>]
      [-k <public key id>]

  Options:
    -f: Overwrite old image if it exists (force)
    -w: Working directory
	The default is that of mktemp, which is almost certainly /tmp.
	NB. Building a CentOS gold image requires approx. 9GB of working space
    -c: Cache directory
	If set, a location to download files to. If the file already exists,
	it is used instead.
    -o: Output filename
        Default: goldimage-installer-<release>.iso
    -p: :-seperated list of paths to prepend to the release script search path.
    -P: :-seperated list of paths to use instead of the default search path.
	See $at_lib/release for a list of available releases.  This MUST MATCH
	the release used to create initialiser iso images.
    -s: Gold Image root user's password.
	Default: secret
    -k: GPG key id to export to the gold image root user's public keyring.
EOF
}

while getopts 'fw:c:o:r:p:P:s:k:' arg; do
  case $arg in
    f) export at_force=1 ;;
    w) export at_work_dir=$OPTARG ;;
    c) export at_cache_dir=$OPTARG ;;
    o) export at_out_file=$OPTARG ;;
    r) export at_release=$OPTARG ;;
    p) export at_search_path_prepend=$OPTARG ;;
    P) export at_search_path_replace=$OPTARG ;;
    s) export at_secret=$OPTARG ;;
    k) export at_pubkey=$OPTARG ;;
    ?)
      usage
      exit 1
      ;;
  esac
done
shift $(expr $OPTIND - 1)

check_common_arguments

if [ -z "$at_out_file" ]; then
  export at_out_file=goldimage-installer-"$at_release".iso
fi

export at_build_dir=$(mktemp ${at_work_dir:+--tmpdir="$at_work_dir"} -d)
export at_meta_dir=$(mktemp ${at_work_dir:+--tmpdir="$at_work_dir"} -d)
trap 'chmod +rw -R "$at_build_dir" "$at_meta_dir" && rm -fr "$at_build_dir" "$at_meta_dir"' EXIT

steps=(
  "1-prepare:     Preparing build directory."
  "1-extract:     Extracting $at_name image to $at_build_dir."
  "0-initialiser: Attaching initialiser script."
  " -pubkey:      Building root's GPG directory."
  "0-bootloader:  Adding automatic option to bootloader."
)

pubkey() {
  gpgdir=$(mktemp ${at_work_dir:+--tmpdir="$at_work_dir"} -d)
  gpg --export -a $at_pubkey | gpg --import --homedir "$gpgdir"
  rm -f "$gpgdir"/*~
  tar cf "$at_build_dir"/gpg.tar --numeric-owner --owner=0 --group=0 -C "$gpgdir" .
  rm -fr "$gpgdir"
  run_script gold 1 pubkey "Installing GPG directory."
}

run_steps gold

append_readme gold

create_image gold

