#!/bin/bash

set -e

if [ ! -e "$(dirname $0)"/atwan.installdirs ]; then
  echo "$(dirname $0)"/atwan.installdirs does not exist. Aborting. >&2
  exit 1
fi
source "$(dirname $0)"/atwan.installdirs
source "$at_bin"/atwan.lib

unset at_force at_work_dir at_cache_dir
unset at_out_file at_release
unset at_pubkey
export at_secret=secret

usage() {
cat <<EOF
  Usage:
    mkiso-goldimage [-f] [-w <work dir>] [-c <cache file>]
      [-o <output>] [-s <root password>]
      -r <release> -u <installer url>
      [-p <public key id>]

  Options:
    -f: Overwrite old image if it exists (force)
    -w: Working directory
	The default is that of mktemp, which is almost certainly /tmp.
	NB. Building a CentOS gold image requires approx. 9GB of working space
    -c: Cache directory
	If set, a location to download files to. If the file already exists,
	it is used instead.
    -o: Output filename
        Default: goldimage-installer-<release>.iso
    -s: Gold Image root user's password.
	Default: secret
    -r: OS release to create a gold image for
	See $at_lib/releases for a list of available releases.
	This MUST MATCH the release used to create initialiser iso images.
    -p: GPG key id to export to the gold image root user's public keyring.
EOF
}

while getopts 'fw:c:o:r:s:p:' arg; do
  case $arg in
    f) export at_force=1 ;;
    w) export at_work_dir=$OPTARG ;;
    c) export at_cache_dir=$OPTARG ;;
    o) export at_out_file=$OPTARG ;;
    r) export at_release=$OPTARG ;;
    s) export at_secret=$OPTARG ;;
    p) export at_pubkey=$OPTARG ;;
    ?)
      usage
      exit 1
      ;;
  esac
done
shift $(expr $OPTIND - 1)

check_arguments

export at_build_dir=$(mktemp ${at_work_dir:+--tmpdir="$at_work_dir"} -d)
export at_meta_dir=$(mktemp ${at_work_dir:+--tmpdir="$at_work_dir"} -d)
trap 'chmod +rw -R "$at_build_dir" "$at_meta_dir" && rm -fr "$at_build_dir" "$at_meta_dir"' EXIT

steps=(
  "prepare:     Preparing build directory."
  "extract:     Extracting $at_name image to $at_build_dir."
  "initialiser: Attaching initialiser script."
  "-pubkey:     Building root's GPG directory."
  "bootloader:  Adding automatic option to bootloader."
)

pubkey() {
  gpgdir=$(mktemp ${at_work_dir:+--tmpdir="$at_work_dir"} -d)
  gpg --export -a $at_pubkey | gpg --import --homedir "$gpgdir"
  rm -f "$gpgdir"/*~
  tar cf "$at_build_dir"/gpg.tar --numeric-owner --owner=0 --group=0 -C "$gpgdir" .
  rm -fr "$gpgdir"
  find_script gold 0 pubkey "Installing GPG directory."
}

run_steps gold

append_readme gold

create_image gold

