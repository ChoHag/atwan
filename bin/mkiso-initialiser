#!/bin/bash

set -e

if [ ! -e "$(dirname $0)"/atwan.installdirs ]; then
  echo "$(dirname $0)"/atwan.installdirs does not exist. Aborting. >&2
  exit 1
fi
source "$(dirname $0)"/atwan.installdirs
source "$at_bin"/atwan.lib

unset at_force at_work_dir at_cache_dir at_out_file
unset at_bootstrap at_bootstrap_pm at_bootstrap_enc
unset at_puppet_dir at_proxy at_release at_secret
unset at_dhcp at_hostname at_fqdn at_ip at_gateway at_dns
unset at_local_release_dir at_signkey
export at_mask=255.255.255.0

usage() {
cat <<EOF
  Usage:
    mkiso-initialiser [-f] [-w <work dir>] [-c <cache dir>]
      [-o <output>] [ (-b|-B) -p <puppet dir> ] [ -h <http proxy> ]
      -r <release> [-s <root password>]
      ( -D | -n <fqdn> -i <ip> [-m <netmask>] [-g <gateway>] ) -d <dns>
      [-l <local release dir>]
      [-k <signing key id>]

  Options:
    -f: Overwrite old image if it exists (force)
    -w: Working directory
	The default is that of mktemp, which is almost certainly /tmp.
    -c: Cache directory
	If set, a location to download files to. If the file already exists,
	it is used instead.
    -o: Output filename
        Default: Based on the template ./initialiser--(<fqdn>|DHCP).iso
    -b: Create a puppetmaster bootstrap iso.
    -B: Create a bootstrap iso using the node's own ENC entry.
	Will not work with DHCP nodes.
    -p: Directory which will be copied to /etc/puppet on the bootstrap server.
    -h: Host's HTTP proxy.
    -r: OS release to create gold image of.
	See $at_lib/releases for a list of available releases.
	This MUST MATCH the release used to create the gold image this
	initialiser iso will be used on.
    -s: Host's new root password.
    -D: DHCP-configured host.
	Unimplemented
    -n: Named host.
    -i: Host's IP address.
	DNS lookup is not implemented thus this parameter is required.
    -m: Host's netmask.
	Default: 255.255.255.0
	Until it is tested, short form netmasks are not supported.
    -g: Host's gateway.
	Default: Network address of host with a .1 suffix.
    -d: Host's DNS.
	A white-space separated list. Use quotes.
	Lookup from this machine's /etc/resolv.conf is not implemented.
    -l: Local release dir.
	Watch this space.
    -k: GPG key id to use to sign the initialiser iso.
EOF
}

while getopts 'fw:c:o:bBp:h:r:s:Dn:i:m:g:d:l:k:' arg; do
  case $arg in
    f) export at_force=1 ;;
    w) export at_work_dir=$OPTARG ;;
    c) export at_cache_dir=$OPTARG ;;
    o) export at_out_file=$OPTARG ;;
    b) export at_bootstrap_pm=1 ;;
    B) export at_bootstrap_enc=1 ;;
    p) export at_puppet_dir=$OPTARG ;;
    h) export at_proxy=$OPTARG ;;
    r) export at_release=$OPTARG ;;
    s) export at_secret=$OPTARG ;;
    D) export at_dhcp=1 ;;
    n) export at_hostname=$OPTARG ;;
    i) export at_ip=$OPTARG ;;
    m) export at_mask=$OPTARG ;;
    g) export at_gateway=$OPTARG ;;
    d) export at_dns=$OPTARG ;;
    l) export at_local_release_dir=$OPTARG ;;
    k) export at_signkey=$OPTARG ;;
    ?)
      usage
      exit 1
      ;;
  esac
done
shift $(expr $OPTIND - 1)

check_arguments

if [ "$at_bootstrap_pm" -a "$at_bootstrap_enc" ]; then
  echo 'Cannot make a puppetmaster (-b) and an ENC (-B) bootstrap iso' >&2
  exit 1
elif [ "$at_bootstrap_pm" ]; then
  export at_bootstrap=pm
  echo Selected a puppetmaster bootstrap iso.
elif [ "$at_bootstrap_enc" ]; then
  export at_bootstrap=enc
  echo Selected an ENC bootstrap iso.
fi
if [ "$at_bootstrap" ]; then
  if [ -z "$at_puppet_dir" -o ! -d "$at_puppet_dir" ]; then
    echo 'Need a puppet_dir (-p) to build a bootstrap iso.' >&2
    exit 1
  fi
fi

if [ -z "$at_dhcp" -a -z "$at_hostname" ]; then
  echo 'Need to specify DHCP (-D) or named (-n) iso.' >&2
  exit 1
elif [ "$at_dhcp" -a "$at_hostname" ]; then
  echo 'Cannot specify a DHCP (-D) and named (-n) iso.' >&2
  exit 1
elif [ "$at_hostname" ]; then
  export at_network=static
  export at_fqdn=$at_hostname
  export at_domain=${at_hostname#*.}
  export at_hostname=${at_hostname%%.*}
  if [ -z "$at_domain" ]; then
    echo 'Named host must include a domain name (FQDN).' >&2
    exit 1
  fi
  if [ -z "$at_ip" ]; then
    echo DNS lookup is unimplemented. >&2
    exit 2
  fi
  if [ -z "$at_gateway" ]; then
    export at_gateway=${at_ip%.*}.1
  fi
  echo Building a named iso for $at_fqdn:
  echo \ \ FQDN: $at_fqdn \($at_hostname @ $at_domain\)
  echo \ \ IP: $at_ip
  echo \ \ Netmask: $at_mask
  echo \ \ Gateway: $at_gateway
elif [ "$at_dhcp" ]; then
  export at_network=dhcp
  echo DHCP iso is unimplemented. >&2
  exit 2
else
  echo The universe has broken logic. >&2
  exit 2
fi
echo \ \ DNS: $at_dns

if [ -z "$at_out_file" ]; then
  if [ "$at_dhcp" ]; then
    export at_out_file="initialiser--DHCP.iso"
  else
    export at_out_file="initialiser--${at_fqdn}.iso"
  fi
fi

export at_build_dir=$(mktemp ${at_work_dir:+--tmpdir="$at_work_dir"} -d)
trap 'chmod +rw -R "$at_build_dir" && rm -fr "$at_build_dir"' EXIT

steps=(
  "-variables: Set variables."
  "stop-initialiser: Stop automatic initialiser (cron)."
  "-secret:    Set root password?"
  "-bootstrap: Run bootstrap?"
  "network:    Configure network and HTTP proxy."
  "repository: Configure package repository."
  "puppet:     Install and run puppet."
)
# proxy, secret

variables() {
  ignore=(at_bin at_lib at_lib_release at_work_dir at_build_dir at_cache_dir)
  (
    for var in ${!at_*}; do
      if [[ ${ignore[@]} =~ $var ]]; then
	continue
      fi
      eval echo export $var=\\\"\$$var\\\"
      true
    done
  ) > "$at_build_dir"/autorun-variables
}

secret() {
  if [ -z "$at_secret" ]; then
    echo No. Root password unchanged.
    return
  fi

  find_script init 1 secret "Updating host root's password."
  push_script secret
}

bootstrap() {
  if [ -z "$at_bootstrap" ]; then
    echo No. Bootstrap not requested.
    return
  fi

  find_script init 1 bootstrap "Installing bootstrap functions."
}

echo Setting up new host\'s initialiser:
unset scripts
run_steps init
echo Host initialiser build complete.

cp "$at_lib"/autorun "$at_build_dir"/autorun

for script in ${scripts[@]}; do
  chmod 755 "$at_build_dir"/autorun-$script
  echo '"$at_top"'/autorun-$script
done >> "$at_build_dir"/autorun
echo \# noise: $( dd if=/dev/random bs=1 count=128 | (shasum||md5sum) )
chmod 755 "$at_build_dir"/autorun

append_readme init

list=$(mktemp ${at_work_dir:+--tmpdir="$at_work_dir"})
for file in "$at_build_dir"/*; do
  if [ -f "$file" ]; then
    gpg --sign ${at_signkey:+--default-key "$at_signkey"} "$file"
    echo "${file##$at_build_dir}" >> "$list"
  else
    echo WARNING: Non-file found in build dir: "${file##$at_build_dir}" >&2
  fi
done
mv "$list" "$at_build_dir"/cd.list
gpg --sign ${at_signkey:+--default-key "$at_signkey"} "$at_build_dir"/cd.list

create_image init

